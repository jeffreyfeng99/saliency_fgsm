##### TEST FOR CORRECTNESS WITHOUT ATTACK

correct ,data_correct ,adv_examples ,noises = [],[],[],[]
correct_nomask, data_correct_nomask, adv_examples_nomask, noises_nomask = [],[],[],[]

original_img = []

indexes_adv_examples = []
indexes_adv_examples_nomask = []

net.eval()

img_size = 224 
#TODO - below code can be optimized and is a bit repetitive
#An image is labelled adverserial only if it's original version was correctly classified

for ep in eps:
    corr , i, corr_nomask  = 0, 0, 0
    for  (data, target) in iter(trainloader):
        
        x_org = Variable(data.view(1,3,img_size,img_size))
        out_org = net(x_org)
        class_idx_org = out_org.max(1)[1].cpu().data[0]    #classification result of original image
        
        print(i)
        if target[0] == 0:
            if 'cougar' in imagenat_classes[class_idx_org]:
                corr = corr+1
        i = i+1
    correct.append(corr)
    correct_nomask.append(corr_nomask)
    print(i)
    
        
print("Correctly Classified Adveserial examples with mask")
print(correct)


#########scikit-image (precise but slow)

from skimage import data, img_as_float
from skimage.measure import compare_ssim
from skimage.transform import resize
from numba import vectorize

height = 2**10
width = 2**10
ssim_masks = []
ssim_nomasks = []

for i in range(len(indexes_adv_examples)):
    if(indexes_adv_examples[i] in indexes_adv_examples_nomask):
        img_mask = adv_examples[i].view(3,img_size,img_size).numpy()
        img_nomask = adv_examples_nomask[indexes_adv_examples_nomask.index(indexes_adv_examples[i])].view(3,img_size,img_size).numpy()

        img_original = original_img[indexes_adv_examples[i]].view(3,img_size,img_size).numpy()

        img_mask = resize(img_as_float(img_mask), (height, width))
        img_nomask = resize(img_as_float(img_nomask), (height, width))
        img_original = resize(img_as_float(img_original), (height, width))

        ssim_mask = compare_ssim(img_mask, img_original, multichannel=True)
        ssim_nomask = compare_ssim(img_nomask, img_original, multichannel=True)
        print(i)
        ssim_masks.append(ssim_mask)
        ssim_nomasks.append(ssim_nomask)

print(ssim_masks)
print(ssim_nomasks)
# print(sum(ssim_pairs)/float(len(ssim_pairs)))


Inception alternative method
###################################
# import torch._utils
# try:
#     torch._utils._rebuild_tensor_v2
# except AttributeError:
#     def _rebuild_tensor_v2(storage, storage_offset, size, stride, requires_grad, backward_hooks):
#         tensor = torch._utils._rebuild_tensor(storage, storage_offset, size, stride)
#         tensor.requires_grad = requires_grad
#         tensor._backward_hooks = backward_hooks
#         return tensor
#     torch._utils._rebuild_tensor_v2 = _rebuild_tensor_v2

# import imp
# MainModel = imp.load_source('MainModel', "/home/jfeng/Documents/new_env_fgsm/spatially_targeted_fgsm/inception_v1/converted_pytorch.py")
# inception_v1 = torch.load('/home/jfeng/Documents/new_env_fgsm/spatially_targeted_fgsm/inception_v1/converted_pytorch.pth')
# device = 'cuda' if torch.cuda.is_available() else 'cpu'
# inception_v1 = inception_v1.cuda()
# if device == 'cuda':
#     inception_v1 = torch.nn.DataParallel(inception_v1)
#     cudnn.benchmark = True
# net = inception_v1
###################### 

Inception alternative method
#####################################
# inception_v1 = inception.KitModel('/home/jfeng/Documents/new_env_fgsm/spatially_targeted_fgsm/inception/pytorch_inception_v1.npy')
# device = 'cuda' if torch.cuda.is_available() else 'cpu'
# inception_v1 = inception_v1.cuda()
# if device == 'cuda':
#     inception_v1 = torch.nn.DataParallel(inception_v1)
#     cudnn.benchmark = True
# net = inception_v1

